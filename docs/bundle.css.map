{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/CharacterMapping.svelte",
    "../src/ResultCharacters.svelte"
  ],
  "sourcesContent": [
    "<script>\n\n    import CharacterMapping from './CharacterMapping.svelte';\n    import ResultCharacters from './ResultCharacters.svelte';\n    import ResultNumber from './ResultNumber.svelte';\n\n    export let version;\n\n    let numberMapping;\n    let name = \"\";\n    let nameParts = [];\n    let charParts = [];\n    let charNumberParts = [];\n    let selectedMapping = \"Chaldean\";\n    $: {\n        switch (selectedMapping) {\n            case \"Chaldean\":\n                numberMapping = {\n                    1: [\"a\", \"i\", \"j\", \"q\", \"y\"],\n                    2: [\"b\", \"k\", \"r\"],\n                    3: [\"c\", \"g\", \"l\", \"s\"],\n                    4: [\"d\", \"m\", \"t\"],\n                    5: [\"e\", \"h\", \"n\", \"x\"],\n                    6: [\"u\", \"v\", \"w\"],\n                    7: [\"o\", \"z\"],\n                    8: [\"f\", \"p\"]\n                }\n                break;\n            case \"Phytagorean\":\n                numberMapping = {\n                    1: [\"a\", \"j\", \"s\"],\n                    2: [\"b\", \"k\", \"t\", \"ö\", \"ß\"],\n                    3: [\"c\", \"l\", \"u\"],\n                    4: [\"d\", \"m\", \"v\"],\n                    5: [\"e\", \"n\", \"w\"],\n                    6: [\"f\", \"o\", \"x\", \"ä\"],\n                    7: [\"g\", \"p\", \"y\"],\n                    8: [\"h\", \"q\", \"z\", \"ü\"],\n                    9: [\"i\", \"r\"]\n                }\n                break;\n            default:\n                alert(\"No mapping defined for \" + selectedMapping);\n        }\n\n        const charMap = new Map(Object.keys(numberMapping).flatMap(function (key) {\n            return numberMapping[key].map(char => [char, Number(key)])\n        }));\n\n        nameParts = name\n            .toLowerCase()\n            .split(\" \")\n            .filter(elem => elem !== \"\");\n\n        charParts = nameParts.map(namePart => [...namePart.toLowerCase()].filter(char => char !== ' '));\n        charNumberParts = charParts.map(charPart => charPart.map(char => {\n            if (!isNaN(char)) {\n                return Number(char);\n            }\n            return charMap.get(char);\n        }));\n    }\n</script>\n\n<style>\n    h1 {\n        color: purple;\n    }\n\n    .centered {\n        text-align: center;\n    }\n</style>\n\n<h1 class=\"centered\">Name Numerology Calculator {version}</h1>\n\n<div class=\"centered\">\n    <form>\n        <div style=\"display:flex; flex-direction: row; justify-content: center; align-items: flex-start\">\n            <input bind:value={name} type=\"text\" autofocus autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\"\n                spellcheck=\"false\" />\n            &nbsp;&nbsp;&nbsp;\n            <select bind:value={selectedMapping}>\n                <option value=\"Chaldean\">Chaldean</option>\n                <option value=\"Phytagorean\">Phytagorean</option>\n            </select>\n            &nbsp;&nbsp;&nbsp;\n            <CharacterMapping {numberMapping} />\n        </div>\n    </form>\n    <hr />\n    <br />\n\n    <div style=\"display:flex; flex-direction: row; justify-content: center\">\n        {#each nameParts as namePart,i }\n            {#if i>0}\n                &nbsp;&nbsp;&nbsp;\n            {/if}\n            <ResultCharacters chars={charParts[i]} charNumbers={charNumberParts[i]} partCount={charParts.length} />\n        {/each}\n    </div>\n    <br />\n    <ResultNumber numbers = {charNumberParts.flat()}/>\n</div>",
    "<script>\n    export let numberMapping;\n\n    $: maxCharCount = Object.keys(numberMapping).reduce((max, number) => Math.max(max, numberMapping[number].length), 0);\n</script>\n\n<style>\n    th {\n        color: rgb(96, 170, 100);\n    }\n</style>\n\n<table>\n    <tr>\n        {#each Object.keys(numberMapping) as number}\n            <th>{number}</th>\n        {/each}\n    </tr>\n    {#each [...Array(maxCharCount).keys()] as row}\n    <tr>\n        {#each Object.values(numberMapping) as mapping}\n            <td>{mapping[row] || \"\"}</td>\n        {/each}\n    </tr>\n    {/each}\n</table>",
    "<script>\n    import ResultNumber from './ResultNumber.svelte';\n\n    export let chars;\n    export let charNumbers;\n    export let partCount;\n\n    function highlightElements(elementId) {\n        var elements = document.getElementsByClassName(elementId);\n        var n = elements.length;\n        for (var i = 0; i < n; i++) {\n            elements[i].classList.add(\"highlighted\");\n        }\n    }\n\n    function lowlightElements(elementId) {\n        var elements = document.getElementsByClassName(elementId);\n        var n = elements.length;\n        for (var i = 0; i < n; i++) {\n            elements[i].classList.remove(\"highlighted\");\n        }\n    }\n</script>\n\n<style>\n    table {\n        border-bottom: 1pt solid #ccc;\n    }\n\n    .highlighted {\n        background-color: rgb(167, 167, 236);\n    }\n</style>\n\n<div>\n    <table>\n        <tr>\n            {#each chars as char }\n                <td class={\"char_\"+char } \n                    on:mouseover={ ()=> highlightElements(\"char_\"+char)}\n                    on:mouseout={ ()=> lowlightElements(\"char_\"+char)}\n                >{char}\n                </td>\n            {/each}\n        </tr>\n        <tr>\n            {#each charNumbers as charNumber}\n                {#if isNaN(charNumber)}\n                    <td>?</td>\n                {:else}\n                    <td class={\"num_\"+charNumber }\n                        on:mouseover={ ()=> highlightElements(\"num_\"+charNumber)}\n                        on:mouseout={ ()=> lowlightElements(\"num_\"+charNumber)}\n                    >{charNumber}\n                </td>\n                {/if}\n            {/each}\n        </tr>\n    </table>\n    {#if partCount >1}\n        <br/>\n        <ResultNumber numbers={charNumbers} />\n    {/if}\n</div>"
  ],
  "names": [],
  "mappings": "AAiEI,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,MAAM,AACjB,CAAC,AAED,SAAS,eAAC,CAAC,AACP,UAAU,CAAE,MAAM,AACtB,CAAC;AChED,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC5B,CAAC;ACgBD,KAAK,eAAC,CAAC,AACH,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACjC,CAAC,AAED,YAAY,eAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACxC,CAAC"
}