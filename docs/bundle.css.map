{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/NamesDisplay.svelte",
    "../node_modules/fa-svelte/src/Icon.html",
    "../src/CharacterMappings.svelte",
    "../src/NameCard.svelte",
    "../src/CharacterNumbers.svelte",
    "../src/NameNumber.svelte"
  ],
  "sourcesContent": [
    "<!-- Shows the active name & the pinned names -->\n\n<script>\n    import { fade, crossfade, fly } from 'svelte/transition';\n    import { quintOut } from 'svelte/easing';\n    import { flip } from 'svelte/animate';\n\n    import Icon from 'fa-svelte'\n    import { faMapPin } from '@fortawesome/free-solid-svg-icons/faMapPin'\n    import { faTrashAlt } from '@fortawesome/free-solid-svg-icons/faTrashAlt'\n\n    import { activeName, pinnedNames } from './stores.js';\n    import NameCard from './NameCard.svelte';\n\n    const [send, receive] = crossfade({\n        duration: d => Math.sqrt(d * 3000),\n\n        fallback(node, params) {\n            const style = getComputedStyle(node);\n            const transform = style.transform === 'none' ? '' : style.transform;\n\n            return {\n                duration: 600,\n                easing: quintOut,\n                css: t => `\n                    transform: ${transform} scale(${t});\n                    opacity: ${t}\n                `\n            };\n        }\n    });\n</script>\n\n<!-- Current Name -->\n<div style=\"display:flex; justify-content: center\" class={$activeName.name===\"\" ? \"hidden\" : \"\" }>\n    {#each [$activeName] as entry (entry.id)}\n        <div out:send=\"{{key: entry.id}}\" animate:flip>\n            <NameCard name={entry.name} let:hoveringControl={controlHovered}>\n                <div class=\"controlNormal\" class:controlHovered on:click=\"{ () => activeName.pin() }\">\n                    <Icon icon={faMapPin}/>\n                </div>\n            </NameCard>  \n        </div>\n    {/each}\n</div>\n\n<!-- Pinned Names -->\n{#if $pinnedNames.length > 0}\n        <h3 in:fade={{ duration: 2000 }} out:fade={{ duration: 200 }} style=\"margin-top: 60px\">Pinned Items</h3>\n        <div class=\"pinnedCards\">\n            {#each $pinnedNames as entry (entry.id)}\n            <div in:receive=\"{{key: entry.id}}\" out:send=\"{{key: entry.id}}\" animate:flip>\n                <NameCard name={entry.name} let:hoveringControl={controlHovered}>\n                    <div class=\"controlNormal\" class:controlHovered on:click=\"{ () => pinnedNames.remove(entry) }\">\n                        <Icon icon={faTrashAlt} style=\"font-size:1.9em;\"/>\n                    </div>\n                </NameCard>\n            </div>\n            {/each}\n        </div>\n    {/if}\n\n<style>\n    \n    h3 {\n        color: var(--color3);\n    }\n    .pinnedCards {\n        display:flex;\n        flex-direction: row;\n        flex-wrap:wrap;\n        justify-content: center;\n    }\n\n    .hidden {\n        visibility: collapse;\n    }\n\n    .controlNormal {\n        opacity: 0.7\n    }\n\n    .controlHovered {\n        opacity: 1\n    }\n\n</style>",
    "<svg\r\n  aria-hidden=\"true\"\r\n  class=\"{classes}\"\r\n  role=\"img\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"{viewBox}\"\r\n>\r\n  <path fill=\"currentColor\" d=\"{path}\" />\r\n</svg>\r\n<script>\r\n  export let icon;\r\n\r\n  let path = [];\r\n  let classes = \"\";\r\n  let viewBox = \"\";\r\n\r\n  $: viewBox = \"0 0 \" + icon.icon[0] + \" \" + icon.icon[1];\r\n\r\n  $: classes = \"fa-svelte \" + ($$props.class ? $$props.class : \"\");\r\n\r\n  $: path = icon.icon[4];\r\n</script>\r\n\r\n<style>\r\n  .fa-svelte {\r\n    width: 1em;\r\n    height: 1em;\r\n    overflow: visible;\r\n    display: inline-block;\r\n  }\r\n</style>",
    "<!-- Table showing which character maps to which number based on the selected numerology system -->\n\n<script>\n    import { fade, fly } from 'svelte/transition';\n    import { characterMapping } from './stores.js';\n\n    $: maxCharCount = Object.keys($characterMapping).reduce((max, number) => Math.max(max, $characterMapping[number].length), 0);\n    let expandMapping = false;\n</script>\n\n<table class=\"fixedWidth\" on:click={()=>expandMapping=!expandMapping}>\n    <tr>\n        {#each Object.keys($characterMapping) as number}\n            <th>{number}</th>\n        {/each}\n    </tr>\n        {#each [...Array(maxCharCount).keys()] as row}\n            <tr transition:fade=\"{{ duration: 270 }}\" class={ expandMapping ? '' : 'hidden' }>\n                {#each Object.values($characterMapping) as mapping}\n                    <td>{mapping[row] || \"\"}</td>\n                {/each}\n            </tr>\n        {/each}\n</table>\n\n<style>\n    table {\n        color: var(--color3);\n        padding: 0.1em\n    }\n\n    table:hover {\n        cursor: pointer;\n    }\n\n    th {\n        padding: 0.14em\n    }\n\n    td {\n        color: var(--color4);\n    }\n\n    /* Keep all other flexbox elements stable when selecting another system */\n    .fixedWidth {\n        width: 132px;\n        text-align: left;\n    }\n\n    .hidden {\n        display: none;\n    }\n</style>",
    "<!-- Active or pinned name card with number results -->\n\n<script>\n    import CharacterNumbers from './CharacterNumbers.svelte';\n    import NameNumber from './NameNumber.svelte';\n\n    import { charMap } from './stores.js';\n\n    // Name item {id, name}\n    export let name;\n    let nameParts = [];\n    let charParts = [];\n    let charNumberParts = [];\n\n    $: {\n        nameParts = name\n            .split(\" \")\n            .filter(elem => elem !== \"\");\n        charParts = nameParts.map(namePart => [...namePart].filter(char => char !== ' '));\n        charNumberParts = charParts.map(charPart => charPart.map(char => {\n            if (!isNaN(char)) {\n                return Number(char);\n            }\n            return $charMap.get(char.toLowerCase());\n        }));\n    }\n\n    let hoveringControl;\n\n    function enterControl() {\n        hoveringControl = true;\n    }\n\n    function leaveControl() {\n        hoveringControl = false;\n    }\n</script>\n\n<div class=\"cardContainer\">\n    <label class=\"card\">\n        <div style=\"display:flex; flex-direction: row; justify-content: center\">\n            {#each nameParts as namePart,i }\n                {#if i>0}\n                    &nbsp;&nbsp;&nbsp;\n                {/if}\n                <CharacterNumbers chars={charParts[i]} charNumbers={charNumberParts[i]} partCount={charParts.length} />\n            {/each}\n        </div>\n        \n        <br />\n        <div style=\"display:flex; flex-direction: row; justify-content: center; align-items: flex-start; flex-wrap:wrap\">\n            <NameNumber numbers = {charNumberParts.flat()}/>\n        </div>\n    </label>\n    <div class=\"cardControl\"  on:mouseenter={enterControl} on:mouseleave={leaveControl}>\n        <slot hoveringControl={hoveringControl}></slot>\n    </div>\n</div>\n\n<style>\n\n    .cardContainer {\n        position: relative;\n    }\n\n    .card {\n        box-shadow: 0 4px 8px 0 var(--color3);\n        border-radius: 2px;\n        padding: 20px;\n        margin: 0 15px 15px;\n        min-height: 85px;\n        min-width: 145px;\n    }\n\n    .cardControl {\n        position: absolute;\n        top: 0.5em;\n        right: 1.3em;\n        color: var(--color3);\n    }\n\n    label {\n        user-select: none;\n    }\n    \n</style>",
    "<!-- Table mapping each character of a name to a number based on the choosen numerology system  -->\n\n<script>\n    import NameNumber from './NameNumber.svelte';\n\n    export let chars;\n    export let charNumbers;\n    export let partCount;\n\n    function highlightElements(elementId) {\n        var elements = document.getElementsByClassName(elementId);\n        var n = elements.length;\n        for (var i = 0; i < n; i++) {\n            elements[i].classList.add(\"highlighted\");\n        }\n    }\n\n    function lowlightElements(elementId) {\n        var elements = document.getElementsByClassName(elementId);\n        var n = elements.length;\n        for (var i = 0; i < n; i++) {\n            elements[i].classList.remove(\"highlighted\");\n        }\n    }\n</script>\n\n<div>\n    <table>\n        <tr>\n            {#each chars as char }\n                <td class={\"char_\"+char } \n                    on:mouseover={ ()=> highlightElements(\"char_\"+char)}\n                    on:mouseout={ ()=> lowlightElements(\"char_\"+char)}\n                >{char}\n                </td>\n            {/each}\n        </tr>\n        <tr>\n            {#each charNumbers as charNumber}\n                {#if isNaN(charNumber)}\n                    <td>?</td>\n                {:else}\n                    <td class={\"num_\"+charNumber }\n                        on:mouseover={ ()=> highlightElements(\"num_\"+charNumber)}\n                        on:mouseout={ ()=> lowlightElements(\"num_\"+charNumber)}\n                    >{charNumber}\n                </td>\n                {/if}\n            {/each}\n        </tr>\n    </table>\n    {#if partCount >1}\n        <br/>\n        <NameNumber numbers={charNumbers} />\n    {/if}\n</div>\n\n<style>\n    table {\n        border-bottom: 1pt solid var(--color3);\n    }\n    \n    .highlighted {\n        background-color: var(--color3);\n    }\n</style>",
    "<!-- Shows crossfoot of a name in steps  -->\n\n<script>\n    export let numbers;\n    let crossfoots = [];\n    $: {\n        crossfoots = [];\n        let currentCrossfootNumbers = numbers.filter(number => !isNaN(number));\n        do {\n            let nextCrossfoot = calculateCrossfoot(currentCrossfootNumbers);\n            crossfoots = [...crossfoots, nextCrossfoot];\n            currentCrossfootNumbers = nextCrossfoot.toString().split(\"\").map(singleNumber => Number(singleNumber));\n        } while (currentCrossfootNumbers.length > 1);\n    }\n\n    function calculateCrossfoot(numberArray) {\n        return numberArray.reduce((sum, number) => sum + number, 0);\n    }\n\n</script>\n\n<style>\n    div {\n        color: var(--color4);\n    }\n\n    .underlined {\n        border-bottom: 1pt solid var(--color4);\n    }\n</style>\n\n<div>\n    {#each crossfoots as crossfoot, i}\n        {#if i>0}\n            {' / '}\n        {/if}\n        {#if i==crossfoots.length-1 && i >0}\n            <b class=\"underlined\">{crossfoot}</b>\n        {:else if crossfoot!=0}\n            <b>{crossfoot}</b>\n        {/if}\n    {/each}\n</div>"
  ],
  "names": [],
  "mappings": "AAgEI,EAAE,cAAC,CAAC,AACA,KAAK,CAAE,IAAI,QAAQ,CAAC,AACxB,CAAC,AACD,YAAY,cAAC,CAAC,AACV,QAAQ,IAAI,CACZ,cAAc,CAAE,GAAG,CACnB,UAAU,IAAI,CACd,eAAe,CAAE,MAAM,AAC3B,CAAC,AAED,OAAO,cAAC,CAAC,AACL,UAAU,CAAE,QAAQ,AACxB,CAAC,AAED,cAAc,cAAC,CAAC,AACZ,OAAO,CAAE,GAAG;IAChB,CAAC,AAED,eAAe,cAAC,CAAC,AACb,OAAO,CAAE,CAAC;IACd,CAAC;AC5DH,UAAU,cAAC,CAAC,AACV,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,OAAO,CACjB,OAAO,CAAE,YAAY,AACvB,CAAC;ACHC,KAAK,eAAC,CAAC,AACH,KAAK,CAAE,IAAI,QAAQ,CAAC,CACpB,OAAO,CAAE,KAAK;IAClB,CAAC,AAED,oBAAK,MAAM,AAAC,CAAC,AACT,MAAM,CAAE,OAAO,AACnB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,OAAO,CAAE,MAAM;IACnB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,IAAI,QAAQ,CAAC,AACxB,CAAC,AAGD,WAAW,eAAC,CAAC,AACT,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,OAAO,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACjB,CAAC;ACUD,cAAc,cAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,AACtB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CACrC,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CACnB,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,KAAK,AACpB,CAAC,AAED,YAAY,cAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,IAAI,QAAQ,CAAC,AACxB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,WAAW,CAAE,IAAI,AACrB,CAAC;ACzBD,KAAK,eAAC,CAAC,AACH,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,AAC1C,CAAC,AAED,YAAY,eAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,QAAQ,CAAC,AACnC,CAAC;AC1CD,GAAG,eAAC,CAAC,AACD,KAAK,CAAE,IAAI,QAAQ,CAAC,AACxB,CAAC,AAED,WAAW,eAAC,CAAC,AACT,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,AAC1C,CAAC"
}